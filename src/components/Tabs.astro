---
const { tabs } = Astro.props as {
  tabs: { title: string; id: string; isActive?: boolean }[];
};
---

<style>
  .is-active {
    @apply bg-white;
  }
</style>
<script>
  const tabButtons = document.querySelectorAll(".tab-button");
  const tabContents = document.querySelectorAll(".tab-panel");
  const search = document.getElementById("search") as HTMLInputElement | null;

  tabButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const tabId = button.getAttribute("data-tab-id");

      tabButtons.forEach((tabButton) => {
        tabButton.classList.remove("is-active");
      });
      button.classList.add("is-active");
      button.classList.remove("hidden");

      tabContents.forEach((content) => {
        const contentId = content.getAttribute("data-tab-id");
        if (contentId !== tabId) {
          content.classList.add("hidden");
        } else {
          content.classList.remove("hidden");
        }
      });

      if (search) {
        search.value = "";
        search.dispatchEvent(new Event("input"));
      }
    });
  });
</script>
<div
  class="flex flex-col md:flex-col-reverse items-center md:items-start lg:items-end justify-between lg:flex-row gap-6 lg:gap-0 mb-2 md:mb-0 md:ml-9"
>
  <div
    class="tab-buttons max-w-full grid grid-rows-2 grid-flow-col md:grid-rows-1 gap-2 md:gap-0"
  >
    {
      tabs.map((tab) => (
        <button
          class:list={[
            "tab-button px-6 py-4 md:px-9 md:py-4 bg-lightGray hover:bg-[#175DDC1A] rounded-full md:rounded-b-none md:rounded-t-[36px] transition-colors duration-200",
            tab.isActive && "is-active",
          ]}
          data-tab-id={tab.id}
          role="tab"
          type="button"
        >
          {tab.title}
        </button>
      ))
    }
  </div>
  <div
    class="w-full lg:w-auto xl:basis-[357px] flex-shrink px-2 lg:mb-4 md:px-10 lg:px-2"
  >
    <slot name="search" />
  </div>
</div>
<div
  class="tab-content rounded-[36px] px-4 xl:px-[104px] py-4 md:py-12 bg-white"
>
  <slot />
</div>
